<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ArgumentExceptionBinaryFileIndexOutOfRange" xml:space="preserve">
    <value>Index is out of range. Must be non-negative and less than the size of the binary file.</value>
  </data>
  <data name="ArgumentExceptionEmptyCollection" xml:space="preserve">
    <value>Collection must contain at least one element.</value>
  </data>
  <data name="ArgumentExceptionEmptyString" xml:space="preserve">
    <value>Parameter cannot be empty or null.</value>
  </data>
  <data name="ArgumentExceptionNestedStatementReference" xml:space="preserve">
    <value>Nested statement cannot be the same object reference as the current statement.</value>
    <comment>!!! RE-WORD !!!</comment>
  </data>
  <data name="ArgumentExceptionNonNegativeInteger" xml:space="preserve">
    <value>Parameter must be a non-negative integer.</value>
  </data>
  <data name="ArgumentExceptionPrimitiveType" xml:space="preserve">
    <value>Parameter must be a primitive type.</value>
  </data>
  <data name="ArgumentExceptionTypeMismatch" xml:space="preserve">
    <value>Parameter type does not match expected type.</value>
  </data>
  <data name="InvalidOperationExceptionReservedSymbolName" xml:space="preserve">
    <value>Internal name for collections used on a symbol that does not represent a collection!</value>
  </data>
  <data name="LayoutExceptionLayoutExists" xml:space="preserve">
    <value>A layout named '{0}' already exists in the namespace.</value>
    <comment>{0} - layout name</comment>
  </data>
  <data name="LayoutExceptionMalformattedLayoutVersion" xml:space="preserve">
    <value>'{0}' is not a valid version number.</value>
    <comment>{0} - version number</comment>
  </data>
  <data name="LayoutExceptionUnsupportedLayoutVersion" xml:space="preserve">
    <value>Layout version '{0}' is not currently supported.</value>
    <comment>{0} - version number</comment>
  </data>
  <data name="NotSupportedExceptionElementAccess" xml:space="preserve">
    <value>Cannot access the element of a symbol that does not represent a collection.</value>
  </data>
  <data name="SyntaxExceptionEmptyLayout" xml:space="preserve">
    <value>Empty layout. At least one statement is required.</value>
  </data>
  <data name="SyntaxExceptionEmptyStructure" xml:space="preserve">
    <value>At least one file object declaration required.</value>
  </data>
  <data name="SyntaxExceptionMissingLayoutName" xml:space="preserve">
    <value>Missing name for Binary Layout.</value>
  </data>
  <data name="SyntaxExceptionMissingRequiredParameter" xml:space="preserve">
    <value>Missing required parameter '{0}'.</value>
    <comment>{0} - parameter identifier</comment>
  </data>
  <data name="SyntaxExceptionUnexpectedNestedStatement" xml:space="preserve">
    <value>Unexpected nested statement.</value>
  </data>
  <data name="SyntaxExceptionUnknownIdentifier" xml:space="preserve">
    <value>Unknown identifier '{0}'.</value>
    <comment>{0} - identifier</comment>
  </data>
  <data name="SyntaxExceptionXmlInvalidRootElement" xml:space="preserve">
    <value>Invalid root element name for Binary Layout. Root element must be named '{0}'.</value>
    <comment>{0} - root element identifier</comment>
  </data>
  <data name="SyntaxExceptionXmlInvalidUsageOfRootElement" xml:space="preserve">
    <value>The identifier '{0}' can only be used for the root element.</value>
    <comment>{0}- root element identifier</comment>
  </data>
  <data name="SyntaxExceptionXmlUnexpectedText" xml:space="preserve">
    <value>Unexpected text '{0}' in element '{1}'.</value>
    <comment>{0} - text
{1} - element name</comment>
  </data>
</root>